name: CI
on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      src: ${{ steps.changes.outputs.src }}
    steps:
      - name: Checkout the repo
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - uses: dorny/paths-filter@4512585405083f25c027a35db413c2b3b9006d50 # v2.11.1
        id: changes
        with:
          filters: |
            src:
            - '**/*.go'
            - '**/go.mod'
            - '**/go.sum'
            - '.golangci.yml'
            - '.github/workflows/ci.yml'

  golangci-lint:
    runs-on: ubuntu-latest
    needs: [changes]
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
        with:
          fetch-depth: 0
      - uses: actions/setup-go@v4
        with:
          go-version-file: 'go.mod'
          cache: false  
      - uses: smartcontractkit/golangci-lint-action@54ab6c5f11d66a92d14c3f7cc41ea13f676644bd # feature/multiple-output-formats-backup
        if: needs.changes.outputs.src == 'true'
        with:
          version: v1.51.1
          only-new-issues: ${{github.event.schedule == ''}} # show only new issues, unless it's a scheduled run
          allow-extra-out-format-args: true
          args: --out-format checkstyle:golangci-lint-report.xml
      - name: Print lint report artifact
        if: always()
        run: test -f golangci-lint-report.xml && cat golangci-lint-report.xml || true          
      - name: Store lint report artifact
        if: always()
        uses: actions/upload-artifact@3cea5372237819ed00197afe530f5a7ea3e805c8 # v3.1.0
        with:
          name: golangci-lint-report
          path: golangci-lint-report.xml
      - name: Collect Metrics
        if: always()
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@90fcbaac8ebf86da9c4d55dba24f6fe3029f0e0b
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: golangci-lint
        continue-on-error: true

  go-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Setup Go
        uses: actions/setup-go@v3
        with:
          go-version-file: "go.mod"
          cache: true
      - name: Download Go vendor packages
        run: go mod download
      - name: Setup Postgres
        uses: ./.github/actions/setup-postgres
      - name: Build
        run: go build -v ./...
      - name: Run tests
        run: ./tools/bin/go_feeds_tests
      - name: Upload Go test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: go-test-results
          path: |
            ./output.txt
            ./coverage.txt
      - name: Collect Metrics
        if: always()
        id: collect-gha-metrics
        uses: smartcontractkit/push-gha-metrics-action@90fcbaac8ebf86da9c4d55dba24f6fe3029f0e0b
        with:
          basic-auth: ${{ secrets.GRAFANA_CLOUD_BASIC_AUTH }}
          hostname: ${{ secrets.GRAFANA_CLOUD_HOST }}
          this-job-name: go-tests
        continue-on-error: true

  sonarqube:
    needs: [changes, golangci-lint, go-tests]
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # fetches all history for all tags and branches to provide more metadata for sonar reports
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@9782bd6a9848b53b110e712e20e42d89988822b7 # v3.0.1          
      - name: Set SonarQube Report Paths
        id: sonarqube_report_paths
        shell: bash
        run: |
          echo "sonarqube_tests_report_paths=$(find go-test-results -name output.txt | paste -sd "," -)" >> $GITHUB_OUTPUT
          echo "sonarqube_coverage_report_paths=$(find go-test-results -name coverage.txt | paste -sd "," -)" >> $GITHUB_OUTPUT
      - name: SonarQube scan with lint
        if: needs.changes.outputs.src == 'true'
        uses: sonarsource/sonarqube-scan-action@a6ba0aafc293e03de5437af7edbc97f7d3ebc91a # v1.2.0
        with:
          args: >
            -Dsonar.go.tests.reportPaths=${{ steps.sonarqube_report_paths.outputs.sonarqube_tests_report_paths }}
            -Dsonar.go.coverage.reportPaths=${{ steps.sonarqube_report_paths.outputs.sonarqube_coverage_report_paths }}
            -Dsonar.go.golangci-lint.reportPaths=golangci-lint-report/golangci-lint-report.xml
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      - name: SonarQube scan without lint
        if: needs.changes.outputs.src != 'true'
        uses: sonarsource/sonarqube-scan-action@a6ba0aafc293e03de5437af7edbc97f7d3ebc91a # v1.2.0
        with:
          args: >
            -Dsonar.go.tests.reportPaths=${{ steps.sonarqube_report_paths.outputs.sonarqube_tests_report_paths }}
            -Dsonar.go.coverage.reportPaths=${{ steps.sonarqube_report_paths.outputs.sonarqube_coverage_report_paths }}
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}              
